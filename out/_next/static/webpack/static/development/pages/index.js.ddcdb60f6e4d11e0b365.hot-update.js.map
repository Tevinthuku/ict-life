{"version":3,"file":"static/webpack/static/development/pages/index.js.ddcdb60f6e4d11e0b365.hot-update.js","sources":["webpack:///./components/CurrencySelector.js"],"sourcesContent":["import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst options = [\n  \"Kenyan Shillings\",\n  \"American Dollars\",\n  \"Euros\",\n  \"Nigerian Naira\"\n];\n\nexport default function SplitButton(props) {\n  const [open, setOpen] = React.useState(false);\n  const [snackbaropen, setSnackBarOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const [selectedIndex, setSelectedIndex] = React.useState(\n    options.indexOf(props.currentCurrency)\n  );\n\n  const handleClick = () => {\n    setSnackBarOpen(true);\n  };\n\n  const handleMenuItemClick = (event, index) => {\n    setSelectedIndex(index);\n    props.setCurrency(options[index]);\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen(prevOpen => !prevOpen);\n  };\n\n  const handleClose = event => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const handleCloseSnackbar = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackBarOpen(false);\n  };\n\n  return (\n    <div>\n      <Grid container>\n        <Grid item xs={12} align=\"center\">\n          <ButtonGroup\n            variant=\"contained\"\n            color=\"primary\"\n            ref={anchorRef}\n            aria-label=\"split button\"\n          >\n            <Button onClick={handleClick}>\n              {\"Current currency is in \" + options[selectedIndex]}\n            </Button>\n            <Button\n              color=\"primary\"\n              size=\"small\"\n              aria-owns={open ? \"menu-list-grow\" : undefined}\n              aria-haspopup=\"true\"\n              onClick={handleToggle}\n            >\n              <ArrowDropDownIcon />\n            </Button>\n          </ButtonGroup>\n          <Popper\n            open={open}\n            anchorEl={anchorRef.current}\n            transition\n            disablePortal\n          >\n            {({ TransitionProps, placement }) => (\n              <Grow\n                {...TransitionProps}\n                style={{\n                  transformOrigin:\n                    placement === \"bottom\" ? \"center top\" : \"center bottom\"\n                }}\n              >\n                <Paper id=\"menu-list-grow\">\n                  <ClickAwayListener onClickAway={handleClose}>\n                    <MenuList>\n                      {options.map((option, index) => (\n                        <MenuItem\n                          key={option}\n                          selected={index === selectedIndex}\n                          onClick={event => handleMenuItemClick(event, index)}\n                        >\n                          {\"Currency in \" + option}\n                        </MenuItem>\n                      ))}\n                    </MenuList>\n                  </ClickAwayListener>\n                </Paper>\n              </Grow>\n            )}\n          </Popper>\n        </Grid>\n      </Grid>\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"left\"\n        }}\n        open={snackbaropen}\n        autoHideDuration={6000}\n        onClose={handleCloseSnackbar}\n        ContentProps={{\n          \"aria-describedby\": \"message-id\"\n        }}\n        message={\n          <span id=\"message-id\">\n            Selected {options[selectedIndex]} currency\n          </span>\n        }\n        action={[\n          <Button\n            key=\"undo\"\n            color=\"secondary\"\n            size=\"small\"\n            onClick={handleCloseSnackbar}\n          >\n            UNDO\n          </Button>,\n          <IconButton\n            key=\"close\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={handleCloseSnackbar}\n          >\n            <CloseIcon />\n          </IconButton>\n        ]}\n      />\n    </div>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAGA;AACA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAXA;AA6BA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqCA;;;;A","sourceRoot":""}